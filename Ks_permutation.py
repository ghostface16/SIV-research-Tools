def permutation(labels_unique, df_no_lab:pd.DataFrame, nsamp_array, prop_to_permut:float, 
                average_size_minus_4:int, dim:int, size_loop:int, nsamp_minus_2:int,
                labels_unique_indx, random_labels)

df_no_lab = df_w_lab.drop(index = 'Labels')
nsamp_keys = list(nsamp_array.keys())
labels_row = df_w_lab.iloc[-1,:]
print(labels_unique)

for ana_loc in labels_unique:
        ref_df = df_no_lab.loc[:,labels_row==ana_loc]
        ref_df_cols = ref_df.columns
        nsamp = nsamp_array[ana_loc]
        nsamp_minus_2 = nsamp - 2
        partition = comb(nsamp, 2) 
        pKs_array = np.zeros((n_permut,))
        n_seqs_to_perm = round(nsamp*prop_to_permut)  #####!!!!!######!!!!!!!***** 
        
        if not pairwise:
            w1 = nsamp_minus_2/(nsamp+average_size_minus_4)
            w2 = 1-w1
        else:
            count_ana_locs = dim - size_loop  #####!!!!!######!!!!!!!*****

        for i in range(size_loop):
            if pairwise:
                ana_loc_to_compare = labels_unique[count_ana_locs]
                nsamp_2_key = nsamp_keys[count_ana_locs]
                nsamp_2 = nsamp_array[nsamp_2_key]
                partition_2 = comb(nsamp_2, 2)
                random_df = df_no_lab.loc[:,labels_row==ana_loc_to_compare]
                rand_cols = random_df.columns
                average_size_minus_4 = nsamp_2 - 4 
                #n_seqs_to_perm = round(nsamp_2*prop_to_permut)  #####!!!!!######!!!!!!!***** 
                w1 = nsamp_minus_2/(nsamp+average_size_minus_4)
                w2 = 1-w1
                
            for permutation in range(n_permut):
                #picking one of the random populations generated by Ks_stat()  
                if not pairwise:    
                    random_samp = np.random.choice(labels_unique_indx,1)
                    rand_cols = random_labels[f'{int(random_samp)}']
                    random_df = df_no_lab[rand_cols]

                #picking ref and random sequences to permute
                random_perm_col_index = np.random.choice(rand_cols, n_seqs_to_perm, replace=False)
                ref_perm_col_index = np.random.choice(ref_df_cols, n_seqs_to_perm, replace=False)
                #permutting ref and random sequences
                permutted_random_df = random_df.drop(random_perm_col_index, axis=1)
                permutted_random_df = pd.concat([permutted_random_df, ref_df[ref_perm_col_index]],axis=1)
                permutted_ref_df = ref_df.drop(ref_perm_col_index , axis=1)
                permutted_ref_df = pd.concat([permutted_ref_df, random_df[random_perm_col_index]],axis=1)
                #permutted random and ref columns
                permutted_ref_df_cols = permutted_ref_df.columns
                permutted_random_df_cols = permutted_random_df.columns

                count, count_2, previous, previous_2 = 0, 0, 0, 0

                for seq_1 in permutted_ref_df_cols:
                    to_use_1 = permutted_ref_df[seq_1]
                    len_to_use_1 = len(to_use_1.shape)

                    if len_to_use_1>1:
                        to_use_1 = to_use_1.iloc[:,0]

                    for seq_2 in permutted_ref_df_cols[count:]:
                        to_use_2 = permutted_ref_df[seq_2]
                        len_to_use_2 = len(to_use_2.shape)

                        if len_to_use_2>1:
                            to_use_2 = to_use_2.iloc[:,0]

                        comparison = to_use_1==to_use_2    
                        D = log(comparison.sum()+1)
                        previous = previous + D

                    count+=1 

                for seq_1 in permutted_random_df_cols:
                    to_use_1 = permutted_random_df[seq_1]
                    len_to_use_1 = len(to_use_1.shape)

                    if len_to_use_1>1:
                        to_use_1 = to_use_1.iloc[:,0]

                    for seq_2 in permutted_random_df_cols[count_2:]:
                        to_use_2 = permutted_random_df[seq_2]
                        len_to_use_2 = len(to_use_2.shape)

                        if len_to_use_2>1:
                            to_use_2 = to_use_2.iloc[:,0]

                        comparison = to_use_1==to_use_2
                        D = log(comparison.sum()+1)
                        previous_2 = previous_2 + D

                    count_2+=1

                pK = previous/partition
                rpK = previous_2/partition_2
                pKw = pK*w1
                rpKw = rpK*w2
                
                if pairwise:
                    pairwise_ks_matrix[count_ana_locs_1-1, count_ana_locs, permutation] = pKw + rpKw
                else:
                    pKs_array[permutation] = pKw + rpKw
            
            if pairwise:
                count_ana_locs+=1
            else:
                pKs_matrix[ana_loc] = pKs_array
        
        if pairwise:
            count_ana_locs_1+=1
            size_loop-=1